// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                      String           @id @default(cuid())
  email                   String           @unique
  emailVerifiedDate       DateTime?        @map("email_verified")
  phone                   String           @unique
  passwordHash            String           @map("password_hash")
  teamId                  Int?             @map("team_id")
  discordId               String?          @unique @map("discord_id")
  discordVerificationCode Int              @unique @map("discord_verification_code")
  firstName               String           @map("first_name")
  lastName                String           @map("last_name")
  university              String
  universityFacultyNumber String           @unique @map("university_faculty_number")
  universityDegree        String           @map("university_degree")
  universityMajor         String           @map("university_major")
  universityYear          String           @map("university_year")
  universityProofImage    String           @map("university_proof_image")
  role                    Role             @default(PARTICIPANT)
  createdAt               DateTime         @default(now()) @map("created_at")
  team                    Team?            @relation(name: "TeamMembers", fields: [teamId], references: [id])
  teamRequests            TeamRequest[]
  teamInvitations         TeamInvitation[]
  teamCaptain             Team?            @relation(name: "TeamCaptain")
  userTechnologies        UserTechnology[]
  accounts                Account[]
  sessions                Session[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserTechnology {
  id           Int        @id @default(autoincrement())
  userId       String     @map("user_id")
  technologyId Int
  createdAt    DateTime   @default(now()) @map("created_at")
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  technology   Technology @relation(fields: [technologyId], references: [id], onDelete: Cascade)
}

model Team {
  id                      Int                     @id @default(autoincrement())
  name                    String                  @unique
  image                   String?
  projectName             String?                 @map("project_name")
  projectDescription      String?                 @map("project_description")
  projectRepository       String?                 @map("project_repository")
  projectLink             String?                 @map("project_link")
  acceptsNewMembers       Boolean                 @map("accepts_new_members")
  points                  Int?
  room                    String?
  presentationTime        DateTime?               @map("presentation_time")
  captainId               String                  @unique @map("captain_id")
  createdAt               DateTime                @default(now()) @map("created_at")
  members                 User[]                  @relation("TeamMembers")
  teamRequests            TeamRequest[]
  teamInvitations         TeamInvitation[]
  teamProjectTechnologies TeamProjectTechnology[]
  captain                 User                   @relation(name: "TeamCaptain", fields: [captainId], references: [id], onDelete: Cascade)
}

model TeamProjectTechnology {
  id           Int        @id @default(autoincrement())
  teamId       Int        @map("team_id")
  technologyId Int        @map("technology_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  team         Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  technology   Technology @relation(fields: [technologyId], references: [id], onDelete: Cascade)
}

model TeamRequest {
  id        Int      @id @default(autoincrement())
  teamId    Int      @map("team_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TeamInvitation {
  id        Int      @id @default(autoincrement())
  teamId    Int      @map("team_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Mentor {
  id                      Int                @id @default(autoincrement())
  firstName               String             @map("first_name")
  lastName                String             @map("last_name")
  email                   String             @unique
  image                   String
  availability            String
  companyId               Int?               @map("company_id")
  discordVerificationCode Int                @unique @map("discord_verification_code")
  createdAt               DateTime           @default(now()) @map("created_at")
  company                 Sponsor?           @relation(fields: [companyId], references: [id])
  mentorTechnologies      MentorTechnology[]
}

model MentorTechnology {
  id           Int        @id @default(autoincrement())
  mentorId     Int        @map("mentor_id")
  technologyId Int        @map("technology_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  mentor       Mentor     @relation(fields: [mentorId], references: [id], onDelete: Cascade)
  technology   Technology @relation(fields: [technologyId], references: [id], onDelete: Cascade)
}

model Sponsor {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  logo        String
  website     String
  createdAt   DateTime @default(now()) @map("created_at")
  mentor      Mentor[]
}

model Schedule {
  title       String
  startsAt    DateTime @map("starts_at")
  endsAt      DateTime @map("ends_at")
  description String
  image       String?
  location    String
  isPrimary   Boolean  @default(false) @map("is_primary")
  createdAt   DateTime @default(now()) @map("created_at")

  @@id([title, startsAt, endsAt])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AdminEmail {
  email String @id
}

model Technology {
  id                      Int                     @id @default(autoincrement())
  name                    String                  @unique
  color                   String
  userTechnologies        UserTechnology[]
  teamProjectTechnologies TeamProjectTechnology[]
  mentorTechnologies      MentorTechnology[]
}

model Regulation {
  id      Int    @id @default(autoincrement())
  title   String
  content String
}

enum Role {
  PARTICIPANT
  ORGANIZER
}
